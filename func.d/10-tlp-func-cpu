#!/bin/sh
# tlp-func-cpu - Processor Functions
#
# Copyright (c) 2020 Thomas Koch <linrunner at gmx.net> and others.
# This software is licensed under the GPL v2 or later.

# Needs: tlp-func-base

# shellcheck disable=SC2086

# ----------------------------------------------------------------------------
# Constants

readonly CPU_BOOST_ALL_CTRL=/sys/devices/system/cpu/cpufreq/boost
readonly INTEL_PSTATED=/sys/devices/system/cpu/intel_pstate
readonly CPU_MIN_PERF_PCT=$INTEL_PSTATED/min_perf_pct
readonly CPU_MAX_PERF_PCT=$INTEL_PSTATED/max_perf_pct
readonly CPU_TURBO_PSTATE=$INTEL_PSTATED/no_turbo

readonly CPU_INFO=/proc/cpuinfo
readonly ENERGYPERF=x86_energy_perf_policy

# ----------------------------------------------------------------------------
# Functions

# --- Scaling Governor

check_intel_pstate () { # detect intel_pstate driver -- rc: 0=present/1=absent
    #  Note: intel_pstate requires Linux 3.9 or higher
    [ -d $INTEL_PSTATED ]
}

set_cpu_scaling_governor () { # set CPU scaling governor -- $1: 0=ac mode, 1=battery mode
    local gov cpu ec

    if [ "$1" = "1" ]; then
        gov=${CPU_SCALING_GOVERNOR_ON_BAT:-}
    else
        gov=${CPU_SCALING_GOVERNOR_ON_AC:-}
    fi

    if [ -n "$gov" ]; then
        ec=0
        for cpu in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do
            if [ -f "$cpu" ] && ! write_sysf "$gov" $cpu; then
                echo_debug "pm" "set_cpu_scaling_governor($1).write_error: $cpu $gov; rc=$?"
                ec=$((ec+1))
            fi
        done
        echo_debug "pm" "set_cpu_scaling_governor($1): $gov; ec=$?"
    else
        echo_debug "pm" "set_cpu_scaling_governor($1).not_configured"
    fi

    return 0
}

set_cpu_scaling_min_max_freq () { # set CPU scaling limits -- $1: 0=ac mode, 1=battery mode
    local minfreq maxfreq cpu ec
    local conf=0

    if [ "$1" = "1" ]; then
        minfreq=${CPU_SCALING_MIN_FREQ_ON_BAT:-}
        maxfreq=${CPU_SCALING_MAX_FREQ_ON_BAT:-}
    else
        minfreq=${CPU_SCALING_MIN_FREQ_ON_AC:-}
        maxfreq=${CPU_SCALING_MAX_FREQ_ON_AC:-}
    fi

    if [ -n "$minfreq" ] && [ "$minfreq" != "0" ]; then
        conf=1
        ec=0
        for cpu in /sys/devices/system/cpu/cpu*/cpufreq/scaling_min_freq; do
            if [ -f "$cpu" ] && ! write_sysf "$minfreq" $cpu; then
                echo_debug "pm" "set_cpu_scaling_min_max_freq($1).min.write_error: $cpu $minfreq; rc=$?"
                ec=$((ec+1))
            fi
        done
        echo_debug "pm" "set_cpu_scaling_min_max_freq($1).min: $minfreq; ec=$ec"
    fi

    if [ -n "$maxfreq" ] && [ "$maxfreq" != "0" ]; then
        conf=1
        ec=0
        for cpu in /sys/devices/system/cpu/cpu*/cpufreq/scaling_max_freq; do
            if [ -f "$cpu" ] && ! write_sysf "$maxfreq" $cpu; then
                echo_debug "pm" "set_cpu_scaling_min_max_freq($1).max.write_error: $cpu $maxfreq; rc=$?"
                ec=$((ec+1))
            fi
            echo_debug "pm" "set_cpu_scaling_min_max_freq($1).max: $maxfreq; ec=$ec"
        done
    fi

    [ $conf -eq 1 ] || echo_debug "pm" "set_cpu_scaling_min_max_freq($1).not_configured"
    return 0
}

# --- Performance Policies

supports_intel_cpu_epb () {
    # rc: 0=CPU supports EPB/1=false
    grep -E -q -m 1 '^flags.+epb' $CPU_INFO
}

supports_intel_cpu_epp () {
    # rc: 0=CPU supports HWP.EPP/1=false
    grep -E -q -m 1 '^flags.+hwp_epp' $CPU_INFO
}

set_intel_cpu_perf_policy () { # set Intel CPU energy vs. performance policies
    # $1: 0=ac mode, 1=battery mode
    #
    # depending on the CPU model the values
    #   performance, balance_performance, default, balance_power, power
    # in CPU_ENERGY_PERF_POLICY_ON_AC/BAT are applied to:
    # (1) energy-performance preference (HWP.EPP) in MSR_IA32_HWP_REQUEST
    # (2) energy-performance bias (EPB) in MSR_IA32_ENERGY_PERF_BIAS
    # when HWP.EPP is available, EPB is not set (unless forced)
    #
    # full backwards compatibility for the replaced parameters:
    # (1) CPU_HWP_ON_AC/BAT: no translation needed
    # (2) ENERGY_PERF_POLICY_ON_AC/BAT: translate
    #     balance-performance --> balance_perfomance
    #     normal              --> default
    #     balance-power       --> balance_power
    #
    # References:
    # - https://www.kernel.org/doc/html/latest/admin-guide/pm/intel_pstate.html#energy-vs-performance-hints
    # - https://www.kernel.org/doc/html/latest/admin-guide/pm/intel_epb.html
    # - https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=4beec1d7519691b4b6c6b764e75b4e694a09c5f7
    # - http://manpages.ubuntu.com/manpages/disco/man8/x86_energy_perf_policy.8.html

    local cnt cpuf ec perf pnum

    if [ "$1" = "1" ]; then
        perf=${CPU_ENERGY_PERF_POLICY_ON_BAT:-${ENERGY_PERF_BIAS_ON_BAT:-${CPU_HWP_ON_BAT:-}}}
    else
        perf=${CPU_ENERGY_PERF_POLICY_ON_AC:-${ENERGY_PERF_BIAS_ON_AC:-${CPU_HWP_ON_AC:-}}}
    fi
    # translate alphanumeric values from EPB to HWP.EPP syntax
    perf=$(printf '%s' "$perf" | sed -r 's/^balance-performance$/balance_performance/;
                                s/^normal$/default/;
                                s/^balance-power$/balance_power/;
                                s/^powersave$/power/')

    if [ -z "$perf" ]; then
        echo_debug "pm" "set_intel_cpu_perf_policy($1).not_configured"
        return 0
    fi

    if check_intel_pstate && supports_intel_cpu_epp; then
        # apply HWP.EPP setting
        cnt=0
        ec=0
        for cpuf in /sys/devices/system/cpu/cpu*/cpufreq/energy_performance_preference; do
            if [ -f $cpuf ]; then
                cnt=$((cnt+1))
                if  ! write_sysf "$perf" $cpuf; then
                    echo_debug "pm" "set_intel_cpu_perf_policy($1).hwp_epp.write_error: $perf $cpuf; rc=$?"
                    ec=$((ec+1))
                fi
            fi
        done
        if [ $cnt -gt 0 ]; then
            echo_debug "pm" "set_intel_cpu_perf_policy($1).hwp_epp: $perf; ec=$ec"
            # HWP.EPP active and applied, quit unless EPB is forced
            [ "$X_FORCE_EPB" = "1" ] || return 0
        else
            echo_debug "pm" "set_intel_cpu_perf_policy($1).hwp_epp.not_available"
        fi
    else
        echo_debug "pm" "set_intel_cpu_perf_policy($1).hwp_epp -- unsupported cpu"
    fi

    if supports_intel_cpu_epb; then
        # apply EPB setting: translate HWP.EPP alphanumeric to EPB numeric values
        # for native kernel support and x86_energy_perf_policy backwards compatibility
        pnum=$(echo $perf | sed -r 's/^performance$/0/;
                                    s/^balance_performance$/4/;
                                    s/^default$/6/;
                                    s/^balance_power$/8/;
                                    s/^power/15/')

        # try native kernel API first (5.2 and later)
        cnt=0
        ec=0
        for cpuf in /sys/devices/system/cpu/cpu*/power/energy_perf_bias; do
            if [ -f $cpuf ]; then
                cnt=$((cnt + 1))
                if  ! write_sysf "$pnum" $cpuf; then
                    echo_debug "pm" "set_intel_cpu_perf_policy($1).epb_kernel.write_error: $perf($pnum) $cpuf; rc=$?"
                    ec=$((ec+1))
                fi
            fi
        done
        if [ $cnt -gt 0 ]; then
            # native kernel API actually detected
            echo_debug "pm" "set_intel_cpu_perf_policy($1).epb_kernel: $perf($pnum); ec=$ec"
            return 0
        fi

        # no native kernel support, try x86_energy_perf_policy
        if ! cmd_exists $ENERGYPERF; then
            # x86_energy_perf_policy not installed
            echo_debug "pm" "set_intel_cpu_perf_policy($1).epb_x: $perf($pnum) -- x86_energy_perf_policy not installed"
        else
            # x86_energy_perf_policy needs kernel module 'msr'
            load_modules $MOD_MSR
            $ENERGYPERF $pnum > /dev/null 2>&1
            rc=$?
            case $rc in
                0) echo_debug "pm" "set_intel_cpu_perf_policy($1).epb_x: $perf($pnum); rc=$?" ;;
                1) echo_debug "pm" "set_intel_cpu_perf_policy($1).epb_x: $perf($pnum); rc=$? -- unsupported cpu" ;;
                2) echo_debug "pm" "set_intel_cpu_perf_policy($1).epb_x: $perf($pnum); rc=$? -- kernel specific x86_energy_perf_policy missing" ;;
                *) echo_debug "pm" "set_intel_cpu_perf_policy($1).epb_x: $perf($pnum); rc=$? -- unknown" ;;
            esac
            return $rc
        fi
    else
        echo_debug "pm" "set_intel_cpu_perf_policy($1).epb -- unsupported cpu"
    fi

    return 0
}

set_intel_cpu_perf_pct () { # set Intel P-state performance limits
                      # $1: 0=ac mode, 1=battery mode
    local min max


    if ! check_intel_pstate; then
        echo_debug "pm" "set_intel_cpu_perf_pct($1).no_intel_pstate"
        return 0
    fi

    if [ "$1" = "1" ]; then
        min=${CPU_MIN_PERF_ON_BAT:-}
        max=${CPU_MAX_PERF_ON_BAT:-}
    else
        min=${CPU_MIN_PERF_ON_AC:-}
        max=${CPU_MAX_PERF_ON_AC:-}
    fi

    if [ ! -f $CPU_MIN_PERF_PCT ]; then
        echo_debug "pm" "set_intel_cpu_perf_pct($1).min.not_supported"
    elif [ -n "$min" ]; then
        write_sysf "$min" $CPU_MIN_PERF_PCT
        echo_debug "pm" "set_intel_cpu_perf_pct($1).min: $min; rc=$?"
    else
        echo_debug "pm" "set_intel_cpu_perf_pct($1).min.not_configured"
    fi

    if [ ! -f $CPU_MAX_PERF_PCT ]; then
        echo_debug "pm" "set_intel_cpu_perf_pct($1).max.not_supported"
    elif [ -n "$max" ]; then
        write_sysf "$max" $CPU_MAX_PERF_PCT
        echo_debug "pm" "set_intel_cpu_perf_pct($1).max: $max; rc=$?"
    else
        echo_debug "pm" "set_intel_cpu_perf_pct($1).max.not_configured"
    fi

    return 0
}

set_cpu_boost_all () { # $1: 0=ac mode, 1=battery mode
    # global cpu boost behavior control based on the current power mode
    #
    # Relevant config option(s): CPU_BOOST_ON_{AC,BAT} with values {'',0,1}
    #
    # Note:
    #  * needs commit #615b7300717b9ad5c23d1f391843484fe30f6c12
    #     (linux-2.6 tree), "Add support for disabling dynamic overclocking",
    #    => requires Linux 3.7 or later

    local val

    if [ "$1" = "1" ]; then
        val=${CPU_BOOST_ON_BAT:-}
    else
        val=${CPU_BOOST_ON_AC:-}
    fi

    if [ -z "$val" ]; then
        # do nothing if unconfigured
        echo_debug "pm" "set_cpu_boost_all($1).not_configured"
        return 0
    fi

    if check_intel_pstate; then
        # use intel_pstate sysfiles, invert value
        if write_sysf "$((val ^ 1))" $CPU_TURBO_PSTATE; then
            echo_debug "pm" "set_cpu_boost_all($1).intel_pstate: $val"
        else
            echo_debug "pm" "set_cpu_boost_all($1).intel_pstate.cpu_not_supported"
        fi
    elif [ -f $CPU_BOOST_ALL_CTRL ]; then
        # use acpi_cpufreq sysfiles
        # simple test for attribute "w" doesn't work, so actually write
        if write_sysf "$val" $CPU_BOOST_ALL_CTRL; then
            echo_debug "pm" "set_cpu_boost_all($1).acpi_cpufreq: $val"
        else
            echo_debug "pm" "set_cpu_boost_all($1).acpi_cpufreq.cpu_not_supported"
        fi
    else
        echo_debug "pm" "set_cpu_boost_all($1).not_available"
    fi

    return 0
}

set_sched_powersave () { # set multi-core/-thread powersave policy
    # $1: 0=ac mode, 1=battery mode

    local pwr pool sdev
    local avail=0

    if [ "$1" = "1" ]; then
        pwr=${SCHED_POWERSAVE_ON_BAT:-}
    else
        pwr=${SCHED_POWERSAVE_ON_AC:-}
    fi

    if [ -z "$pwr" ]; then
        # do nothing if unconfigured
        echo_debug "pm" "set_sched_powersave($1).not_configured"
        return 0
    fi

    for pool in mc smp smt; do
        sdev="/sys/devices/system/cpu/sched_${pool}_power_savings"
        if [ -f "$sdev" ]; then
            write_sysf "$pwr" $sdev
            echo_debug "pm" "set_sched_powersave($1): ${sdev##/*/} $pwr; rc=$?"
            avail=1
        fi
    done

    [ "$avail" = "1" ] || echo_debug "pm" "set_sched_powersave($1).not_available"

    return 0
}


# --- Misc

set_nmi_watchdog () { # enable/disable nmi watchdog
    local nmiwd=${NMI_WATCHDOG:-}

    if [ -z "$nmiwd" ]; then
        # do nothing if unconfigured
        echo_debug "pm" "set_nmi_watchdog.not_configured"
        return 0
    fi

    if [ -f /proc/sys/kernel/nmi_watchdog ]; then
        if write_sysf "$nmiwd" /proc/sys/kernel/nmi_watchdog; then
            echo_debug "pm" "set_nmi_watchdog: $nmiwd; rc=$?"
        else
            echo_debug "pm" "set_nmi_watchdog.disabled_by_kernel: $nmiwd"
        fi
    else
        echo_debug "pm" "set_nmi_watchdog.not_available"
    fi

    return 0
}

set_phc_controls () { # set core voltages
    local control
    local ctrl_avail="0"

    phc_controls=${PHC_CONTROLS:-}

    if [ -z "$phc_controls" ]; then
        # do nothing if unconfigured
        echo_debug "pm" "set_phc_controls.not_configured"
        return 0
    fi

    for control in /sys/devices/system/cpu/cpu*/cpufreq/phc_controls; do
        if [ -f "$control" ]; then
            write_sysf "$phc_controls" $control
            echo_debug "pm" "set_phc_controls: $control $phc_controls; rc=$?"
            ctrl_avail="1"
        fi
    done

    [ "$ctrl_avail" = "0" ] && echo_debug "pm" "set_phc_controls.not_available"

    return 0
}
